/*
 * This file is generated by jOOQ.
 */
package de.tichawa.cis.config.model.tables;


import de.tichawa.cis.config.model.Keys;
import de.tichawa.cis.config.model.Tivicc;
import de.tichawa.cis.config.model.tables.records.ElectronicRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Electronic extends TableImpl<ElectronicRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tivicc.electronic</code>
     */
    public static final Electronic ELECTRONIC = new Electronic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ElectronicRecord> getRecordType() {
        return ElectronicRecord.class;
    }

    /**
     * The column <code>tivicc.electronic.cis_type</code>.
     */
    public final TableField<ElectronicRecord, String> CIS_TYPE = createField(DSL.name("cis_type"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>tivicc.electronic.cis_length</code>.
     */
    public final TableField<ElectronicRecord, Integer> CIS_LENGTH = createField(DSL.name("cis_length"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tivicc.electronic.select_code</code>.
     */
    public final TableField<ElectronicRecord, String> SELECT_CODE = createField(DSL.name("select_code"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>tivicc.electronic.art_no</code>.
     */
    public final TableField<ElectronicRecord, UInteger> ART_NO = createField(DSL.name("art_no"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>tivicc.electronic.multiplier</code>.
     */
    public final TableField<ElectronicRecord, String> MULTIPLIER = createField(DSL.name("multiplier"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>tivicc.electronic.amount</code>.
     */
    public final TableField<ElectronicRecord, String> AMOUNT = createField(DSL.name("amount"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    private Electronic(Name alias, Table<ElectronicRecord> aliased) {
        this(alias, aliased, null);
    }

    private Electronic(Name alias, Table<ElectronicRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tivicc.electronic</code> table reference
     */
    public Electronic(String alias) {
        this(DSL.name(alias), ELECTRONIC);
    }

    /**
     * Create an aliased <code>tivicc.electronic</code> table reference
     */
    public Electronic(Name alias) {
        this(alias, ELECTRONIC);
    }

    /**
     * Create a <code>tivicc.electronic</code> table reference
     */
    public Electronic() {
        this(DSL.name("electronic"), null);
    }

    public <O extends Record> Electronic(Table<O> child, ForeignKey<O, ElectronicRecord> key) {
        super(child, key, ELECTRONIC);
    }

    @Override
    public Schema getSchema() {
        return Tivicc.TIVICC;
    }

    @Override
    public List<ForeignKey<ElectronicRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ElectronicRecord, ?>>asList(Keys.FK_ELECTRONIC_ART_NO);
    }

    private transient Price _price;

    public Price price() {
        if (_price == null)
            _price = new Price(this, Keys.FK_ELECTRONIC_ART_NO);

        return _price;
    }

    @Override
    public Electronic as(String alias) {
        return new Electronic(DSL.name(alias), this);
    }

    @Override
    public Electronic as(Name alias) {
        return new Electronic(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Electronic rename(String name) {
        return new Electronic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Electronic rename(Name name) {
        return new Electronic(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, Integer, String, UInteger, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
