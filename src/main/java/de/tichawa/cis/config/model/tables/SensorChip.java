/*
 * This file is generated by jOOQ.
 */
package de.tichawa.cis.config.model.tables;


import de.tichawa.cis.config.model.DefaultSchema;
import de.tichawa.cis.config.model.Keys;
import de.tichawa.cis.config.model.tables.records.SensorChipRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SensorChip extends TableImpl<SensorChipRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sensor_chip</code>
     */
    public static final SensorChip SENSOR_CHIP = new SensorChip();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SensorChipRecord> getRecordType() {
        return SensorChipRecord.class;
    }

    /**
     * The column <code>sensor_chip.name</code>.
     */
    public final TableField<SensorChipRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>sensor_chip.family</code>.
     */
    public final TableField<SensorChipRecord, Integer> FAMILY = createField(DSL.name("family"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sensor_chip.dpi</code>.
     */
    public final TableField<SensorChipRecord, Integer> DPI = createField(DSL.name("dpi"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sensor_chip.dead_pixels</code>.
     */
    public final TableField<SensorChipRecord, Integer> DEAD_PIXELS = createField(DSL.name("dead_pixels"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sensor_chip.pixel_per_sensor</code>.
     */
    public final TableField<SensorChipRecord, Integer> PIXEL_PER_SENSOR = createField(DSL.name("pixel_per_sensor"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sensor_chip.clock_speed</code>.
     */
    public final TableField<SensorChipRecord, Integer> CLOCK_SPEED = createField(DSL.name("clock_speed"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sensor_chip.timing</code>.
     */
    public final TableField<SensorChipRecord, Integer> TIMING = createField(DSL.name("timing"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sensor_chip.binning</code>.
     */
    public final TableField<SensorChipRecord, Integer> BINNING = createField(DSL.name("binning"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sensor_chip.light_en</code>.
     */
    public final TableField<SensorChipRecord, Integer> LIGHT_EN = createField(DSL.name("light_en"), SQLDataType.INTEGER.nullable(false), this, "");

    private SensorChip(Name alias, Table<SensorChipRecord> aliased) {
        this(alias, aliased, null);
    }

    private SensorChip(Name alias, Table<SensorChipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sensor_chip</code> table reference
     */
    public SensorChip(String alias) {
        this(DSL.name(alias), SENSOR_CHIP);
    }

    /**
     * Create an aliased <code>sensor_chip</code> table reference
     */
    public SensorChip(Name alias) {
        this(alias, SENSOR_CHIP);
    }

    /**
     * Create a <code>sensor_chip</code> table reference
     */
    public SensorChip() {
        this(DSL.name("sensor_chip"), null);
    }

    public <O extends Record> SensorChip(Table<O> child, ForeignKey<O, SensorChipRecord> key) {
        super(child, key, SENSOR_CHIP);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SensorChipRecord> getPrimaryKey() {
        return Keys.PK_SENSOR_CHIP;
    }

    @Override
    public List<UniqueKey<SensorChipRecord>> getKeys() {
        return Arrays.<UniqueKey<SensorChipRecord>>asList(Keys.PK_SENSOR_CHIP);
    }

    @Override
    public SensorChip as(String alias) {
        return new SensorChip(DSL.name(alias), this);
    }

    @Override
    public SensorChip as(Name alias) {
        return new SensorChip(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SensorChip rename(String name) {
        return new SensorChip(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SensorChip rename(Name name) {
        return new SensorChip(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
