/*
 * This file is generated by jOOQ.
 */
package de.tichawa.cis.config.model.tables;


import de.tichawa.cis.config.model.Keys;
import de.tichawa.cis.config.model.Tivicc;
import de.tichawa.cis.config.model.tables.records.PriceRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Price extends TableImpl<PriceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tivicc.price</code>
     */
    public static final Price PRICE = new Price();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PriceRecord> getRecordType() {
        return PriceRecord.class;
    }

    /**
     * The column <code>tivicc.price.art_no</code>.
     */
    public final TableField<PriceRecord, UInteger> ART_NO = createField(DSL.name("art_no"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>tivicc.price.ferix_key</code>.
     */
    public final TableField<PriceRecord, String> FERIX_KEY = createField(DSL.name("ferix_key"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>tivicc.price.display_name</code>.
     */
    public final TableField<PriceRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tivicc.price.price</code>.
     */
    public final TableField<PriceRecord, Double> PRICE_ = createField(DSL.name("price"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>tivicc.price.assembly_time</code>.
     */
    public final TableField<PriceRecord, Double> ASSEMBLY_TIME = createField(DSL.name("assembly_time"), SQLDataType.DOUBLE.defaultValue(DSL.field("NULL", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>tivicc.price.power_consumption</code>.
     */
    public final TableField<PriceRecord, Double> POWER_CONSUMPTION = createField(DSL.name("power_consumption"), SQLDataType.DOUBLE.defaultValue(DSL.field("NULL", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>tivicc.price.weight</code>.
     */
    public final TableField<PriceRecord, Double> WEIGHT = createField(DSL.name("weight"), SQLDataType.DOUBLE.defaultValue(DSL.field("NULL", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>tivicc.price.photo_value</code>.
     */
    public final TableField<PriceRecord, Double> PHOTO_VALUE = createField(DSL.name("photo_value"), SQLDataType.DOUBLE.defaultValue(DSL.field("NULL", SQLDataType.DOUBLE)), this, "");

    private Price(Name alias, Table<PriceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Price(Name alias, Table<PriceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tivicc.price</code> table reference
     */
    public Price(String alias) {
        this(DSL.name(alias), PRICE);
    }

    /**
     * Create an aliased <code>tivicc.price</code> table reference
     */
    public Price(Name alias) {
        this(alias, PRICE);
    }

    /**
     * Create a <code>tivicc.price</code> table reference
     */
    public Price() {
        this(DSL.name("price"), null);
    }

    public <O extends Record> Price(Table<O> child, ForeignKey<O, PriceRecord> key) {
        super(child, key, PRICE);
    }

    @Override
    public Schema getSchema() {
        return Tivicc.TIVICC;
    }

    @Override
    public UniqueKey<PriceRecord> getPrimaryKey() {
        return Keys.KEY_PRICE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PriceRecord>> getKeys() {
        return Arrays.<UniqueKey<PriceRecord>>asList(Keys.KEY_PRICE_PRIMARY, Keys.KEY_PRICE_FERIX_KEY_UNIQUE);
    }

    @Override
    public Price as(String alias) {
        return new Price(DSL.name(alias), this);
    }

    @Override
    public Price as(Name alias) {
        return new Price(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Price rename(String name) {
        return new Price(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Price rename(Name name) {
        return new Price(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UInteger, String, String, Double, Double, Double, Double, Double> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
